package net.jfaker.bot;

import java.util.List;
import java.util.stream.Stream;

/**
 * An abstract class inherited by all bots
 * All bot implementation will generate too methods to allow set custom value for some property
 * ex: a follow class User
 *
 * <pre>{@code
 *     public record User(long id, String name){
 *
 *     }
 * }</pre>
 *
 * will be generated a follow bot using default configuration
 *
 * <pre>{@code
 *     public class UserBot extends AbstractBot<User> {
 *
 *         private CustomFaker faker = new CustomFaker();
 *
 *         private Supplier<Long> id = () -> (long) faker.number().positive();
 *
 *         private Supplier<String> name = () -> faker.lorem().word();
 *
 *         public UserBot withId(final Supplier<Long> id) {
 *             this.id = id;
 *             return this;
 *         }
 *
 *         public UserBot withName(final Supplier<String> name) {
 *             this.name = name;
 *             return this;
 *         }
 *
 *         public User build() {
 *             return new User(id.get(), name.get());
 *         }
 *     }
 * }</pre>
 * @param <B> A class instance generated by bot
 */
public abstract class AbstractBot<B> {

    /**
     * Method how must be implemented by all bots
     * {@return A instance of B with random data}
     */
    public abstract B build();

    /**
     * A method to generate a list of B
     * @param size use to define how many items will be generated
     * {@return a java.util.List of B where all elements has a random data in your properties}
     */
    public List<B> build(final long size){
        return Stream.generate(this::build)
                .limit(size)
                .toList();
    }

}
